#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// ES moduleÏóêÏÑú __dirname ÎåÄÏ≤¥
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// ÏßÄÏõê Ïñ∏Ïñ¥
const supportedLanguages = ['ko', 'en', 'zh', 'id'];

// ÏÇ¨Ïù¥Ìä∏ Í∏∞Î≥∏ Ï†ïÎ≥¥
const baseUrl = 'https://rinkorea.com';
const outputDir = path.join(__dirname, '../public');

// ÎùºÏö∞Ìä∏ ÏÑ§Ï†ï
const routes = [
    { path: '/', changefreq: 'daily', priority: 1.0 },
    { path: '/about', changefreq: 'monthly', priority: 0.8 },
    { path: '/products', changefreq: 'weekly', priority: 0.9 },
    { path: '/equipment', changefreq: 'weekly', priority: 0.9 },
    { path: '/projects', changefreq: 'weekly', priority: 0.8 },
    { path: '/certificates', changefreq: 'monthly', priority: 0.7 },
    { path: '/news', changefreq: 'daily', priority: 0.8 },
    { path: '/resources', changefreq: 'weekly', priority: 0.7 },
    { path: '/qna', changefreq: 'weekly', priority: 0.6 },
    { path: '/contact', changefreq: 'monthly', priority: 0.7 },
    { path: '/shop', changefreq: 'daily', priority: 0.9 }
];

// XML Ïù¥Ïä§ÏºÄÏù¥ÌîÑ Ìï®Ïàò
const escapeXml = (unsafe) => {
    return unsafe.replace(/[<>&'"]/g, (c) => {
        switch (c) {
            case '<': return '&lt;';
            case '>': return '&gt;';
            case '&': return '&amp;';
            case "'": return '&apos;';
            case '"': return '&quot;';
            default: return c;
        }
    });
};

// Î©îÏù∏ Îã§Íµ≠Ïñ¥ ÏÇ¨Ïù¥Ìä∏Îßµ ÏÉùÏÑ±
const generateMainSitemap = () => {
    const currentDate = new Date().toISOString().split('T')[0];

    let xml = '<?xml version="1.0" encoding="UTF-8"?>\n';
    xml += '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9" ';
    xml += 'xmlns:xhtml="http://www.w3.org/1999/xhtml">\n';

    routes.forEach(route => {
        supportedLanguages.forEach(lang => {
            const url = `${baseUrl}${route.path}?lang=${lang}`;

            xml += '  <url>\n';
            xml += `    <loc>${escapeXml(url)}</loc>\n`;
            xml += `    <lastmod>${currentDate}</lastmod>\n`;
            xml += `    <changefreq>${route.changefreq}</changefreq>\n`;
            xml += `    <priority>${route.priority}</priority>\n`;

            // hreflang ÎßÅÌÅ¨ Ï∂îÍ∞Ä
            supportedLanguages.forEach(altLang => {
                const altLangCode = {
                    ko: 'ko-KR',
                    en: 'en-US',
                    zh: 'zh-CN',
                    id: 'id-ID'
                }[altLang];

                const altUrl = `${baseUrl}${route.path}?lang=${altLang}`;
                xml += `    <xhtml:link rel="alternate" hreflang="${altLangCode}" href="${escapeXml(altUrl)}" />\n`;
            });

            // x-default Ï∂îÍ∞Ä
            xml += `    <xhtml:link rel="alternate" hreflang="x-default" href="${escapeXml(baseUrl + route.path)}" />\n`;

            xml += '  </url>\n';
        });
    });

    xml += '</urlset>';
    return xml;
};

// Ïñ∏Ïñ¥Î≥Ñ ÏÇ¨Ïù¥Ìä∏Îßµ ÏÉùÏÑ±
const generateLanguageSitemap = (language) => {
    const currentDate = new Date().toISOString().split('T')[0];

    let xml = '<?xml version="1.0" encoding="UTF-8"?>\n';
    xml += '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">\n';

    routes.forEach(route => {
        const url = `${baseUrl}${route.path}?lang=${language}`;

        xml += '  <url>\n';
        xml += `    <loc>${escapeXml(url)}</loc>\n`;
        xml += `    <lastmod>${currentDate}</lastmod>\n`;
        xml += `    <changefreq>${route.changefreq}</changefreq>\n`;
        xml += `    <priority>${route.priority}</priority>\n`;
        xml += '  </url>\n';
    });

    xml += '</urlset>';
    return xml;
};

// ÏÇ¨Ïù¥Ìä∏Îßµ Ïù∏Îç±Ïä§ ÏÉùÏÑ±
const generateSitemapIndex = () => {
    const currentDate = new Date().toISOString().split('T')[0];

    let xml = '<?xml version="1.0" encoding="UTF-8"?>\n';
    xml += '<sitemapindex xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">\n';

    // Î©îÏù∏ ÏÇ¨Ïù¥Ìä∏Îßµ
    xml += '  <sitemap>\n';
    xml += `    <loc>${baseUrl}/sitemap.xml</loc>\n`;
    xml += `    <lastmod>${currentDate}</lastmod>\n`;
    xml += '  </sitemap>\n';

    // Ïñ∏Ïñ¥Î≥Ñ ÏÇ¨Ïù¥Ìä∏Îßµ
    supportedLanguages.forEach(lang => {
        xml += '  <sitemap>\n';
        xml += `    <loc>${baseUrl}/sitemap-${lang}.xml</loc>\n`;
        xml += `    <lastmod>${currentDate}</lastmod>\n`;
        xml += '  </sitemap>\n';
    });

    xml += '</sitemapindex>';
    return xml;
};

// robots.txt ÏÉùÏÑ±
const generateRobotsTxt = () => {
    return `User-agent: *
Allow: /

# Sitemaps
Sitemap: ${baseUrl}/sitemap.xml
Sitemap: ${baseUrl}/sitemap-index.xml
${supportedLanguages.map(lang => `Sitemap: ${baseUrl}/sitemap-${lang}.xml`).join('\n')}

# Language-specific content
Allow: /?lang=ko
Allow: /?lang=en
Allow: /?lang=zh
Allow: /?lang=id

# Block unnecessary crawling
Disallow: /admin/
Disallow: /api/
Disallow: /_next/
Disallow: /static/
Disallow: /*.json$
Disallow: /*?*utm_*
Disallow: /*?*fbclid*
Disallow: /*?*gclid*

# Crawl delay
Crawl-delay: 1

# Important pages
Allow: /products
Allow: /projects
Allow: /about
Allow: /contact
Allow: /shop
Allow: /news
Allow: /resources
`;
};

// JSON ÏÇ¨Ïù¥Ìä∏Îßµ ÏÉùÏÑ±
const generateJSONSitemap = () => {
    const currentDate = new Date().toISOString();
    const urls = [];

    routes.forEach(route => {
        supportedLanguages.forEach(lang => {
            const url = `${baseUrl}${route.path}?lang=${lang}`;
            const alternateUrls = supportedLanguages.map(altLang => ({
                language: {
                    ko: 'ko-KR',
                    en: 'en-US',
                    zh: 'zh-CN',
                    id: 'id-ID'
                }[altLang],
                url: `${baseUrl}${route.path}?lang=${altLang}`
            }));

            urls.push({
                url,
                lastModified: currentDate.split('T')[0],
                changeFrequency: route.changefreq,
                priority: route.priority,
                language: {
                    ko: 'ko-KR',
                    en: 'en-US',
                    zh: 'zh-CN',
                    id: 'id-ID'
                }[lang],
                alternateUrls
            });
        });
    });

    return JSON.stringify({
        version: '1.0',
        generated: currentDate,
        baseUrl,
        supportedLanguages,
        totalUrls: urls.length,
        urls
    }, null, 2);
};

// Î©îÏù∏ Ïã§Ìñâ Ìï®Ïàò
const generateSitemaps = async () => {
    try {
        console.log('üöÄ Generating multilingual sitemaps...');

        // Ï∂úÎ†• ÎîîÎ†âÌÜ†Î¶¨ ÌôïÏù∏
        if (!fs.existsSync(outputDir)) {
            fs.mkdirSync(outputDir, { recursive: true });
        }

        // Î©îÏù∏ ÏÇ¨Ïù¥Ìä∏Îßµ ÏÉùÏÑ±
        const mainSitemap = generateMainSitemap();
        fs.writeFileSync(path.join(outputDir, 'sitemap.xml'), mainSitemap, 'utf8');
        console.log('‚úÖ Generated: sitemap.xml');

        // Ïñ∏Ïñ¥Î≥Ñ ÏÇ¨Ïù¥Ìä∏Îßµ ÏÉùÏÑ±
        supportedLanguages.forEach(lang => {
            const langSitemap = generateLanguageSitemap(lang);
            fs.writeFileSync(path.join(outputDir, `sitemap-${lang}.xml`), langSitemap, 'utf8');
            console.log(`‚úÖ Generated: sitemap-${lang}.xml`);
        });

        // ÏÇ¨Ïù¥Ìä∏Îßµ Ïù∏Îç±Ïä§ ÏÉùÏÑ±
        const sitemapIndex = generateSitemapIndex();
        fs.writeFileSync(path.join(outputDir, 'sitemap-index.xml'), sitemapIndex, 'utf8');
        console.log('‚úÖ Generated: sitemap-index.xml');

        // robots.txt ÏÉùÏÑ±
        const robotsTxt = generateRobotsTxt();
        fs.writeFileSync(path.join(outputDir, 'robots.txt'), robotsTxt, 'utf8');
        console.log('‚úÖ Generated: robots.txt');

        // JSON ÏÇ¨Ïù¥Ìä∏Îßµ ÏÉùÏÑ±
        const jsonSitemap = generateJSONSitemap();
        fs.writeFileSync(path.join(outputDir, 'sitemap.json'), jsonSitemap, 'utf8');
        console.log('‚úÖ Generated: sitemap.json');

        console.log('\nüéâ All sitemaps generated successfully!');
        console.log(`üìÅ Location: ${outputDir}`);
        console.log('üìä Statistics:');
        console.log(`   ‚Ä¢ Languages: ${supportedLanguages.length}`);
        console.log(`   ‚Ä¢ Routes: ${routes.length}`);
        console.log(`   ‚Ä¢ Total URLs: ${routes.length * supportedLanguages.length}`);
        console.log('\nüìã Generated files:');
        console.log('   ‚Ä¢ sitemap.xml (main multilingual sitemap)');
        console.log('   ‚Ä¢ sitemap-index.xml (sitemap index)');
        supportedLanguages.forEach(lang => {
            console.log(`   ‚Ä¢ sitemap-${lang}.xml (${lang} specific)`);
        });
        console.log('   ‚Ä¢ robots.txt (search engine directives)');
        console.log('   ‚Ä¢ sitemap.json (structured data)');

    } catch (error) {
        console.error('‚ùå Error generating sitemaps:', error);
        process.exit(1);
    }
};

// ÏßÅÏ†ë Ïã§Ìñâ Ïãú ÏÇ¨Ïù¥Ìä∏Îßµ ÏÉùÏÑ±
generateSitemaps();

export {
    generateSitemaps,
    generateMainSitemap,
    generateLanguageSitemap,
    generateSitemapIndex,
    generateRobotsTxt,
    generateJSONSitemap,
    supportedLanguages,
    routes,
    baseUrl
}; 